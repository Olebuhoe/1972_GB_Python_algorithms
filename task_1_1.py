"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для первого скрипта
"""
import random
import json
from memory_profiler import profile

# Задание с курса "Алгоритмы и структуры данных на Python", 3 урок, задание 1: скрипт создания словаря. Изначально
# созданный словарь для дальнейшего использования можно перегнать в json, а потом по необходимости опять загрузить
# данные в словарь с помощью json.load()


@profile
def dict_filling(n):
    return {i+1: random.randint(0, 100) for i in range(n)}


@profile
def dict_filling_2(n):
    return json.dumps({i+1: random.randint(0, 100) for i in range(n)})


dict_filling(100000)
dict_filling_2(100000)

# Экономия памяти на лицо - инкремент в случае использования json.dumps меньше в 4 раза:
"""
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     6     19.4 MiB     19.4 MiB           1   @profile
     7                                         def dict_filling(n):
     8     27.4 MiB      8.0 MiB      100003       return {i+1: random.randint(0, 100) for i in range(n)}


Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    11     19.7 MiB     19.7 MiB           1   @profile
    12                                         def dict_filling_2(n):
    13     27.4 MiB      2.0 MiB      100003       return json.dumps({i+1: random.randint(0, 100) for i in range(n)})
"""


