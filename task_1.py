"""
Задание 1.
Реализуйте функции:
a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени
ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга
Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""
import time
import random


# Создаем декоратор для измерения времени выполнения функции:
def time_dec(func):
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        x = func(*args, **kwargs)
        end = time.perf_counter()
        print(f'Время выполнения функции {func.__name__}: {end - start} сек')
        return x
    return wrapper


''' а) заполнение списка и словаря '''


# Функция для заполнения списка:
@time_dec
def list_filling(n):                        # O(N)
    lst = []                                # O(1)
    for i in range(n):                      # O(N)
        lst.append(random.randint(0, 100))  # O(1)
    return lst                              # O(1)


# Функция для заполнения словаря:
@time_dec
def dict_filling(n, k=1):                          # O(N)
    dct = {}                                       # O(1)
    for i in range(n):                             # O(N)
        # dct[k] = random.randint(0, 100)          # O(1)
        dct.setdefault(k, random.randint(0, 100))  # O(1)
        k += 1                                     # O(1)
    return dct                                     # O(1)

# Замеры времени показали, что запись в словарь почти всегда медленнее подобной операции для списка при сопоставимой
# сложности в О-нотации. Это логично, т.к. при записи в словарь происходит индексация и хеширование ключей.


''' b) получение элемента списка и словаря '''


@time_dec
def get_list_elem(lst, n):  # O(1)
    return lst[n]           # O(1)


@time_dec
def get_dict_elem(dct, key, value=None):  # O(1)
    return dct.get(key, value)            # O(1)


# Замеры времени показали, что получение элемента словаря быстрее, чем списка при сопоставимой сложности в О-нотации,
# что скорее всего связано с более скоростным доступом по ключу из-за их хеширования


''' c) удаление элемента списка и словаря '''


# Функция для удаления элемента списка методом .pop():
@time_dec
def del_list_elem(lst, n=-1):  # O(N)
    return lst.pop(n)          # O(N)


# Функция для удаления элемента списка посредством del:
@time_dec
def del_list_elem_2(lst, n):  # O(N)
    del lst[n]                # O(N)


# Функция для удаления элемента словаря методом .pop():
@time_dec
def del_dict_elem(dct, key, value=None):  # O(1)
    return dct.pop(key, value)            # O(1)


# Функция для удаления элемента словаря посредством del:
@time_dec
def del_dict_elem_2(dct, key):  # O(1)
    del dct[key]                # O(1)


# Замеры времени показали, что удаление элемента словаря быстрее, чем списка, как через pop(), так и через del, а del
# всегда быстрее pop(). Это логично, т.к. сложность алгоритмов выполнения данных операций для словаря константная, а
# для списка - линейная.


if __name__ == '__main__':
    a = list_filling(10000)
    print(a)
    b = dict_filling(10000)
    print(b)
    print(get_list_elem(a, 0))
    print(get_dict_elem(b, 0))
    print(del_list_elem(a, 0))
    print(a)
    print(del_list_elem_2(a, 0))
    print(a)
    print(del_dict_elem(b, 1))
    print(b)
    print(del_dict_elem_2(b, 2))
    print(b)
