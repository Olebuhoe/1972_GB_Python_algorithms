"""
Задание 2.
Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив,
элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F.
Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’],
произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].
Подсказка:
Попытайтесь решить это задание в двух вариантах
1) через collections
defaultdict(list)
int(, 16)
reduce
2) через ООП
вспомните про перегрузку методов
__mul__
__add__
"""
from collections import defaultdict


def func_16(x='0', y='1'):
    a = input('Введите первое 16-ричное число: ').upper()
    b = input('Введите второе 16-ричное число: ').upper()
    dct = defaultdict(list)
    for i in a, b:
        dct[i] = [_ for _ in i]
    for key in dct.keys():
        x = hex(int(x, 16) + int(key, 16))
        y = hex(int(y, 16) * int(key, 16))
    # print(f'Сумма введенных чисел равна: {x.upper()[2:]}')         # если нужно вывести ответ в не в формате списка,
    # print(f'Произведение введенных чисел равна: {y.upper()[2:]}')  # а в цифро-буквенном формате
    for i in x, y:
        dct[i.upper()[2:]] = [_ for _ in i.upper()[2:]]
    print(f'Сумма введенных чисел равна: {dct[x.upper()[2:]]}')
    print(f'Произведение введенных чисел равна: {dct[y.upper()[2:]]}')
    return dct


print(func_16())

