"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
a = {('login1', 'password1'): 'no account activation',
     ('login2', 'password2'): 'account activated',
     ('login3', 'password3'): 'account activated',
     ('login4', 'password4'): 'no account activation',
     ('login5', 'password5'): 'account activated'}


def activation_check(user_data):                                                     # O(N)
    for k, v in user_data.items():                                                   # O(N)
        if v == 'no account activation':                                             # O(1)
            print(f"Пользователю '{k[0]}' необходимо активировать учетную запись.")  # O(1)
    return 'Спасибо, что пользуетесь нашим ресурсом!'                                # O(1)


def activation_check_2(user_data):                                                   # O(N log N)
    b = dict(reversed(sorted(user_data.items(), key=lambda x: x[1])))                # O(N log N)
    for k, v in b.items():                                                           # O(N)
        while v == 'no account activation':                                          # O(1) либо (O(N))
            print(f"Пользователю '{k[0]}' необходимо активировать учетную запись.")  # O(1)
            break                                                                    # O(1)
    return 'Спасибо, что пользуетесь нашим ресурсом!'                                # O(1)


if __name__ == '__main__':
    print(activation_check(a))
    print(activation_check_2(a))

# Большие сомнения по правильности определения сложности второй функции, но первая однозначно выгоднее,
# т.к. тут линейная сложность, а во второй либо квадратичная, либо линейно-логарифмическая
