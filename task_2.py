"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""
from memory_profiler import profile

# Проблема при профилировании рекурсии заключается в том, что profile по своей сути является декоратором, который
# вызывается вместе с вызовом функции, а в  случае с рекурсией, которая вызывает сама себя несколько раз, соответственно
# и profile выдаст несколько таблиц, по количеству этих вызовов.
# Поэтому решением может быть простейшая обертка рекурсивной функции, которая отработает внутри нее, а profile выдаст
# одну таблицу по факту завершения выполнения обертки, внутри которой отработаются все шаги рекурсии


@profile
def wrapper_func(*args):
    def even_odd(num, x=0, y=0):
        if num < 1:
            return f'Количество четных и нечетных цифр в числе равно: ({x}, {y})'
        elif num % 10 % 2 == 0:
            x += 1
        else:
            y += 1
        return even_odd(num // 10, x, y)
    return even_odd(*args)


print(wrapper_func(12345))
